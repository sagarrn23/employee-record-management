{"version":3,"sources":["Components/Header/Header.js","Components/Search/Search.js","Components/Form/Map/Map.js","Components/Record/Record.js","Components/Form/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","className","title","Search","type","id","placeholder","onChange","event","data","searchHandler","Fuse","shouldSort","tokenize","threshold","location","distance","minMatchCharLength","keys","search","target","value","searchResult","searchItem","onKeyDown","e","listReset","GoogleApiWrapper","apiKey","Fragment","google","zoom","style","width","height","initialCenter","coords","disableDefaultUI","draggable","position","Record","persons","name","email","address","street","suite","city","zipcode","href","phone","website","to","onClick","deleteRec","geo","Form","htmlFor","App","state","empRecord","axios","get","then","res","setState","result","this","keyCode","delete","displayRecords","map","record","key","deleteRecord","exact","path","render","filterEmp","bind","updateFreshList","component","React","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e0d431ce.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = (props) => {\n    return(\n        <header className=\"col-md-12\">\n            <h1>{props.title}</h1>\n        </header>\n    )\n}\n\nexport default Header;","import React from 'react';\nimport Fuse from 'fuse.js';\n\nconst searchResult = (event, data, searchHandler) => {\n    const options = {\n        shouldSort: true,\n        tokenize: true,\n        threshold: 0.0,\n        location: 0,\n        distance: 100,\n        minMatchCharLength: 1,\n        keys: ['name', 'email', 'company.name'],\n    }\n    let fuse = new Fuse(data, options);\n    let filterResult = fuse.search(event.target.value);\n    searchHandler(filterResult);\n}\n\nconst Search = (props) => {\n    return(\n        <div className=\"search-employee col-md-12\">\n            <input\n                type=\"text\"\n                id=\"search-emp\" \n                placeholder=\"Search Record\" \n                onChange={(event) => searchResult(event, props.searchItem, props.searchHandler)}\n                onKeyDown={(e) => props.listReset(e)}\n            />\n        </div>\n    )\n}\n\nexport default Search;","import React from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\n\n\nconst EmpLocation = (props) => {\n    const style = {\n        width: \"100%\",\n        height: \"100%\"\n    }\n    return (\n        <React.Fragment>\n            <Map\n                google={props.google}\n                zoom={2}\n                style={style}\n                initialCenter={props.coords}\n                disableDefaultUI={true}\n                draggable={false}\n            >\n                <Marker position={props.coords} />\n            </Map>\n        </React.Fragment>\n    )\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDFZIT6v7Zhc1gDaselOkkKv72umRfe6p4'\n})(EmpLocation);","import React from 'react';\nimport EmpLocation from \"../Form/Map/Map\";\nimport {Link} from 'react-router-dom';\n\nconst Record = (props) => {\n    return(\n        <li className=\"col-md-6\">\n            <div className=\"card row\">\n                <div className=\"card-body col-sm-9 col-12\">\n                    <h5 className=\"card-title mb-10\">{props.persons.name}</h5>\n                    <h6 className=\"card-subtitle\"><strong>Email:</strong> {props.persons.email}</h6>\n                    <p className=\"card-text mb-0\"><strong>Address: </strong>{props.persons.address.street}, {props.persons.address.suite}, {props.persons.address.city}, {props.persons.address.zipcode}</p>\n                    <div>\n                        <strong>Phone: </strong>\n                        <a href={`tel:` + props.persons.phone}>{props.persons.phone}</a>\n                    </div>\n                    <div>\n                        <strong>Website: </strong>\n                        <a href={props.persons.website} target=\"_blank\">{props.persons.website}</a>\n                    </div>\n                    <Link to=\"/edit-record\" className=\"btn btn-primary btn-sm\">Edit</Link>\n                    <span onClick={props.deleteRec} className=\"btn btn-danger btn-sm\">Delete</span>\n                </div>\n                <div className=\"col-sm-3 col-12\">\n                    <EmpLocation coords={props.persons.address.geo} />\n                </div>\n            </div>\n        </li>\n    )\n}\n\nexport default Record;","import React from 'react'\n\nconst Form = () => {\n    return (\n        <div className=\"col-sm-12 text-left\">\n            <div className=\"form-row\">\n                <div className=\"form-group col-md-6\">\n                    <label htmlFor=\"inputEmail4\">Name</label>\n                    <input type=\"email\" className=\"form-control\" id=\"inputEmail4\" placeholder=\"Email\"/>\n                </div>\n                <div className=\"form-group col-md-6\">\n                    <label htmlFor=\"inputPassword4\">Email</label>\n                    <input type=\"password\" className=\"form-control\" id=\"inputPassword4\" placeholder=\"Password\"/>\n                </div>\n            </div>\n            <button type=\"submit\" className=\"btn btn-primary\">Sign in</button>\n        </div>\n    )\n}\n\nexport default Form;","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport \"./App.css\";\nimport Header from \"./Components/Header/Header\";\nimport Search from \"./Components/Search/Search\";\nimport Record from \"./Components/Record/Record\";\nimport Form from \"./Components/Form/Form\";\nimport axios from \"axios\";\n\nclass App extends React.Component {\n    state = {\n        title: \"Employee Record Management\",\n        empRecord: []\n    };\n\n    componentDidMount() {\n        axios.get(`https://jsonplaceholder.typicode.com/users`).then(res => {\n            this.setState({\n                empRecord: res.data\n            });\n        });\n    }\n\n    filterEmp(result) {\n        this.setState({\n            empRecord: result\n        });\n    }\n\n    updateFreshList(e) {\n        if(e.keyCode === 8 || e.keyCode === 46) {\n            axios.get(`https://jsonplaceholder.typicode.com/users`).then(res => {\n                this.setState({\n                    empRecord: res.data\n                });\n            });\n        }\n    }\n\n    deleteRecord(id) {\n        axios.delete(`https://jsonplaceholder.typicode.com/users/${id}`)\n            .then(() => {\n                return axios.get(`https://jsonplaceholder.typicode.com/users`)\n            })\n            .then((res) => {\n                this.setState({\n                    empRecord: res.data\n                });\n            })\n    }\n\n    render() {\n        let displayRecords = this.state.empRecord.map((record) => {\n            return <Record\n                key={record.id}\n                persons={record}\n                deleteRec={() => this.deleteRecord(record.id)}\n            />;\n        });\n\n        return (\n            <Router>\n                <div className=\"container-fluid\">\n                    <div className=\"row text-center\">\n                        <Header title={this.state.title} />\n                        \n                        <Route exact path=\"/\" render={props => (\n                            <React.Fragment>\n                                <Search\n                                    searchItem={this.state.empRecord}\n                                    searchHandler={this.filterEmp.bind(this)}\n                                    listReset={this.updateFreshList.bind(this)}\n                                />\n                                \n                                <div className=\"col-md-12\">\n                                    <ul className=\"row\">\n                                        {displayRecords}\n                                    </ul>\n                                </div>\n                            </React.Fragment>\n                        )}/>\n\n                        <Route path=\"/edit-record\" component={Form}></Route>\n                        \n                    </div>\n                </div>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}